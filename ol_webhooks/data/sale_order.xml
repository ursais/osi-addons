<odoo>
    <data>
        <!-- model_id and operation should be unique if you need to handle that logic in python. -->
        <!-- SALE ORDERS -->
        <!-- The webhook.events -->
        <record id="sale_order_create" model="webhook.event">
            <field name="name">Sale Order: Create</field>
            <field name="model_id" search="[('model', '=', 'sale.order')]" />
            <field name="model_name">sale.order</field>
            <field name="operation">create</field>
        </record>
        <record id="sale_order_update" model="webhook.event">
            <field name="name">Sale Order: Update</field>
            <field name="model_id" search="[('model', '=', 'sale.order')]" />
            <field name="model_name">sale.order</field>
            <field name="operation">update</field>
        </record>
        <record id="sale_order_delete" model="webhook.event">
            <field name="name">Sale Order: Delete</field>
            <field name="model_id" search="[('model', '=', 'sale.order')]" />
            <field name="model_name">sale.order</field>
            <field name="operation">delete</field>
        </record>
        <!-- The Webhook -->
        <record id="sale_order_webhook" model="webhook">
            <field name="client_id" ref="ol_api.webhook_client_onlogic" />
            <field name="url_path">sale-order</field>
            <field name="enabled">True</field>
            <field name="timeout">10</field>
            <field name="event_ids" eval="[
            (4, ref('ol_webhooks.sale_order_create'), 0),
            (4, ref('ol_webhooks.sale_order_update'), 0),
            (4, ref('ol_webhooks.sale_order_delete'), 0)
            ]"/>
        </record>
    </data>
</odoo>