<odoo>
    <data>
        <!-- model_id and operation should be unique if you need to handle that logic in python. -->
        <!-- The webhook.events -->
        <record id="project_task_create" model="webhook.event">
            <field name="name">Project Task: Create</field>
            <field name="model_id" search="[('model', '=', 'project.task')]" />
            <field name="model_name">project.task</field>
            <field name="operation">create</field>
        </record>
        <record id="project_task_update" model="webhook.event">
            <field name="name">Project Task: Update</field>
            <field name="model_id" search="[('model', '=', 'project.task')]" />
            <field name="model_name">project.task</field>
            <field name="operation">update</field>
        </record>
        <record id="project_task_delete" model="webhook.event">
            <field name="name">Project Task: Delete</field>
            <field name="model_id" search="[('model', '=', 'project.task')]" />
            <field name="model_name">project.task</field>
            <field name="operation">delete</field>
        </record>
        <!-- The Webhook -->
        <record id="project_task_webhook" model="webhook">
            <field name="client_id" ref="ol_api.webhook_client_onlogic" />
            <field name="url_path">project-task</field>
            <field name="enabled">True</field>
            <field name="event_ids" eval="[
            (4, ref('ol_webhooks.project_task_create'), 0),
            (4, ref('ol_webhooks.project_task_update'), 0),
            (4, ref('ol_webhooks.project_task_delete'), 0)
            ]"/>
        </record>
    </data>
</odoo>